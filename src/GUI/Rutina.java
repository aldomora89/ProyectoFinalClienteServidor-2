/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import com.google.gson.Gson;
import coolrest.CoolRestRequest;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import proyectofinalclienteservidor.Ejercicios;
import proyectofinalclienteservidor.NivelDePermisos;
import proyectofinalclienteservidor.URLDefinition;
import proyectofinalclienteservidor.UtilsCliente;

/**
 *
 * @author Juan Carlos Cortes
 */
public class Rutina extends javax.swing.JFrame {

    /**
     * Creates new form Rutina
     */
    public Rutina() {
        initComponents();
        this.lblNombreDelCliente.setText(UtilsCliente.usuarioSeleccionado);
        this.btnBorrar.setVisible(false);
        this.btnAgregar.setVisible(false);
        
        if(UtilsCliente.nivelDeUsuarioLogueado != NivelDePermisos.Cliente){
            this.btnBorrar.setVisible(true);
            this.btnAgregar.setVisible(true);
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblCliente = new javax.swing.JLabel();
        lblNombreDelCliente = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        tablaRutina = new javax.swing.JTable();
        btnRefrescar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        lblTituloGrande = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblCliente.setText("Cliente: ");

        lblNombreDelCliente.setText("nombreDelCliente");

        tablaRutina.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre de Ejercicio", "Maquina", "Peso", "Categoria", "Repeticiones"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(tablaRutina);
        if (tablaRutina.getColumnModel().getColumnCount() > 0) {
            tablaRutina.getColumnModel().getColumn(0).setPreferredWidth(100);
        }

        btnRefrescar.setText("Refrescar");
        btnRefrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefrescarActionPerformed(evt);
            }
        });

        jButton2.setText("Prueba");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar ejercicio");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        lblTituloGrande.setFont(new java.awt.Font("Consolas", 3, 24)); // NOI18N
        lblTituloGrande.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTituloGrande.setText("Rutina de ejercicio");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCliente)
                        .addGap(18, 18, 18)
                        .addComponent(lblNombreDelCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAgregar)
                        .addGap(36, 36, 36)
                        .addComponent(btnBorrar)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTituloGrande, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRefrescar))
                            .addComponent(jScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(34, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTituloGrande)
                    .addComponent(btnRefrescar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCliente)
                    .addComponent(lblNombreDelCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnBorrar)
                    .addComponent(jButton2))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefrescarActionPerformed
        try {
            refrescar();
        } catch (InterruptedException ex) {
            Logger.getLogger(Rutina.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ExecutionException ex) {
            Logger.getLogger(Rutina.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRefrescarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(this.tablaRutina.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "No selecciono ningun valor");
        } else{
            DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaRutina.getModel();
            Object columna1 = modeloTabla.getValueAt(this.tablaRutina.getSelectedRow(), 0);
            Object columna2 = modeloTabla.getValueAt(this.tablaRutina.getSelectedRow(), 1);
            Object columna3 = modeloTabla.getValueAt(this.tablaRutina.getSelectedRow(), 2);
            Object columna4 = modeloTabla.getValueAt(this.tablaRutina.getSelectedRow(), 3);
            Object columna5 = modeloTabla.getValueAt(this.tablaRutina.getSelectedRow(), 4);
            System.out.println(columna1);
            System.out.println(columna2);
            System.out.println(columna3);
            System.out.println(columna4);
            System.out.println(columna5);
            System.out.println(columna1.getClass());
            System.out.println(columna2.getClass());
            System.out.println(columna3.getClass());
            System.out.println(columna4.getClass());
            System.out.println(columna5.getClass());    
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        try {
            if(this.tablaRutina.getSelectedRow() == -1){
                JOptionPane.showMessageDialog(null, "No selecciono ningun valor");
            } else{
                DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaRutina.getModel();
                Object nombreDeEjercicio = modeloTabla.getValueAt(this.tablaRutina.getSelectedRow(), 0);
                Object maquina = modeloTabla.getValueAt(this.tablaRutina.getSelectedRow(), 1);
                Object peso = modeloTabla.getValueAt(this.tablaRutina.getSelectedRow(), 2);
                Object categoria = modeloTabla.getValueAt(this.tablaRutina.getSelectedRow(), 3);
                Object repeticiones = modeloTabla.getValueAt(this.tablaRutina.getSelectedRow(), 4);
                
                Ejercicios ejercicio = new Ejercicios(UtilsCliente.usuarioSeleccionado, Double.parseDouble(String.valueOf(peso)),
                                                      Integer.valueOf(String.valueOf(maquina)), String.valueOf(nombreDeEjercicio),
                                                      String.valueOf(categoria), String.valueOf(repeticiones));
                
                CoolRestRequest rest = new CoolRestRequest();
                rest.postResource(URLDefinition.EliminarRutinas.getUrl(), new Gson().toJson(ejercicio));
                JOptionPane.showMessageDialog(this, "Se ha borrado el ejercicio seleccionado.");
                   
            }
            refrescar();
        } catch (InterruptedException ex) {
            Logger.getLogger(Rutina.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ExecutionException ex) {
            Logger.getLogger(Rutina.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        AgregaEjercicio addEjercicio = new AgregaEjercicio();
        addEjercicio.setVisible(true);
    }//GEN-LAST:event_btnAgregarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rutina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rutina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rutina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rutina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Rutina().setVisible(true);
            }
        });
    }
    
    private void refrescar() throws InterruptedException, ExecutionException{
        DefaultTableModel modeloTabla = (DefaultTableModel) this.tablaRutina.getModel();
        modeloTabla.setRowCount(0);
        
        CoolRestRequest rest = new CoolRestRequest();
        String result = rest.getResource(URLDefinition.Rutina.getUrl() + "?id=" + UtilsCliente.usuarioSeleccionado);
        
        if(!result.equals("NoHay")){
            Ejercicios[] Arreglo = new Gson().fromJson(result, Ejercicios[].class);
            List<Ejercicios> EjeciciosList = new ArrayList<>(Arrays.asList(Arreglo));
            
            for(Ejercicios ejercicio : EjeciciosList){
                modeloTabla.addRow(new Object[]{ejercicio.getNombreDeEjercicio(),
                                                ejercicio.getNumeroDeMaquina(),
                                                ejercicio.getPesos(),
                                                ejercicio.getCategoría(),
                                                ejercicio.getRepeticiones()});
            }
        } else{
            result = "El usuario no tiene rutina asignada.";
            JOptionPane.showMessageDialog(this, result);
        }
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnRefrescar;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblNombreDelCliente;
    private javax.swing.JLabel lblTituloGrande;
    private javax.swing.JTable tablaRutina;
    // End of variables declaration//GEN-END:variables
}
